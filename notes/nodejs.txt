___V8 Engine___
- The V8 engine takes Javascript and compiles it into Machine Code.
- Node.js is written in C++ because it uses the V8 engine.
- Javascript -> Node.js (C++ + V8) -> Machine Code

___Global Object___
- When writing Javascript in the browser, the global object is window (alerts, etc.) but when using Node.js the global object is no longer the window. However, it still has a bunch of methods you could use in the global object right away.

___Function Expressions___
//normal function statement
function sayHi(){
  console.log('hi');
}

sayHi();

//function expression; function(){} part is an anonymous function
var sayBye = function(){
  console.log('bye');
};

sayBye();

//passing a function
function callFunction(fun){
  fun();
}

callFunction(sayBye);

___Modules and require()___
./count.js
var counter = function(arr){
    return 'There are ' + arr.length + ' elements in this array';
};

module.exports = counter; //tells us which functions we want from this module

./app.js
var counter = require('./count.js') //allows us to create a function in the main app to call upon

console.log(counter(['shaun', 'crystal', 'ryu']));

___Module Patterns___ [Using object literal notation: setting something to an empty object]
./stuff.js //Fasthand version of module.exports.property = property
module.exports = {
  counter: counter,
  adder: adder,
  pi: pi
};

./app.js
var stuff = require('./stuff.js')

console.log(stuff.counter(['shaun', 'crystal', 'ryu']));
console.log(stuff.adder(5,6));
console.log(stuff.adder(stuff.pi,5));

___The Node Event Emitter___
var events = require('events');
var util = require('util');

//class object for person
var Person = function(name){
    this.name = name;
};

//allows any Person we create to INHERIT the EventEmitter.
//Which we call when we say person.on
util.inherits(Person, events.EventEmitter)

var james = new Person('james');
var mary = new Person('mary');
var ryu = new Person('ryu');
var people = [james, mary, ryu];

people.forEach(function(person){
    person.on('speak', function(mssg){
        console.log(person.name + ' said: ' + mssg);
    });
});

//emit the events
james.emit('speak', 'hey dudes');
ryu.emit('speak', 'I want curry');

___Reading & Writing Files (fs)___
var fs = require('fs');

//Sync part means that it will read the entire file before moving
//on to the next line of code
var readMe = fs.readFileSync('./readMe.txt', 'utf8'); //utf8 is required because when reading files we're just reading 1's and 0's
fs.writeFileSync('./writeMe.txt', readMe);

//Because async, we need a callback function to fire when it is done
//We use it so that if we have code in the rest of the file, it will
//continue to run while we read.
fs.readFile('./readMe.txt', 'utf8', function(err, data){
    fs.writeFile('writeMe.txt', data);
}); //non blocking async code

console.log('This should fire before the read.')

___Creating & Removing Directories___
var fs = require('fs');

//create a directory and write to it
fs.mkdir('stuff', function(){
    fs.readFile('readMe.txt', 'utf8', function(err, data){
        fs.writeFile('./stuff/writeMe.txt', data);
    });
});

//delete a directory that has a file inside
fs.unlink('./stuff/writeMe.txt', function(){
    fs.rmdir('stuff');
});

___Clients & Servers___
Protocols
- A set of communication rules, that two sides agree to use when communicating
Every computer has their own IP, to connect between two IP's, a socket is opened. The information sent is structured based on different protocols (http; ftp). When the communication is done, packets are sent back through the socket (tcp).
Ports
- A program running on a computer can listen for requests sent to a particular port number. If we were to sent a request to a server, how would we know what particular program will respond to it. An email program could respond to our request when really we want to API's instead. That's why ports.
- E.g. 172.24.86.76:3000
Response Headers
- Client sends a request + request headers to the Server. Server responds with response data + response headers.
var http = require('http');

var server = http.createServer(function(req, res){
    console.log('reuest was made: ' + req.url);
    res.writeHead(200, {'Content-Type': 'text/plain'}); //response header
    res.end('Hey ninjas'); //response
});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');

___Streams and Buffers___
Buffer
- Temp storage spot for a chunk of data that is being transferred from one place to another
- Buffer is filled with data, then passed along
- Transfer small chunks of data at a time
Stream
- A stream of data that is being passed along.
- Data -> Buffer -> Data Passed On And Processed "Waiting for movie to buffer."

___Readable Streams___
Streams
- Writable Streams - allow node js to write data to a stream
- Readable Streams - allow node js to read data from a stream
- Duplex - can read and write to a stream

___Writable Streams___
var fs = require('fs');

var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
var myWriteStream = fs.createWriteStream(__dirname + '/writeMe.txt', 'utf8');

myReadStream.on('data', function(chunk){
    console.log('new chunk received:');
    myWriteStream.write(chunk);
});

___Pipes___
- Takes data from a read stream and pipes data to a write stream. Don't have to manually read/write.
var fs = require('fs');

var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
var myWriteStream = fs.createWriteStream(__dirname + '/writeMe.txt', 'utf8');

myReadStream.pipe(myWriteStream);

//Making a request to a server and returning data using a stream.
var http = require('http');
var fs = require('fs');


var server = http.createServer(function(req, res){
    console.log('reuest was made: ' + req.url);
    res.writeHead(200, {'Content-Type': 'text/plain'}); //response header
    var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
    myReadStream.pipe(res);
});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');

___Serving HTML Pages___
//Requires index.html
var http = require('http');
var fs = require('fs');


var server = http.createServer(function(req, res){
    console.log('reuest was made: ' + req.url);
    res.writeHead(200, {'Content-Type': 'text/html'}); //response header
    var myReadStream = fs.createReadStream(__dirname + '/index.html', 'utf8');
    myReadStream.pipe(res);
});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');

___Serving JSON___
var http = require('http');
var fs = require('fs');


var server = http.createServer(function(req, res){
    console.log('reuest was made: ' + req.url);
    res.writeHead(200, {'Content-Type': 'application/json'}); //response header
    var myObj = {
        name: 'Ryu',
        job: 'Ninja',
        age: 29
    };
    res.end(JSON.stringify(myObj)); //only takes strings or buffers so we need to serialize our json object
});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');

___Basic Routing___
var http = require('http');
var fs = require('fs');


var server = http.createServer(function(req, res){
    console.log('reuest was made: ' + req.url);
    if (req.url === '/home' || req.url === '/'){
        res.writeHead(200, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/index.html').pipe(res);
    } else if(req.url === '/contact'){
        res.writeHead(200, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/contact.html').pipe(res);
    } else if(req.url === '/api/ninjas'){
        var ninjas = [{name: 'ryu', age: 29}, {name: 'yoshi', age:32}];
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(ninjas));
    } else {
        res.writeHead(404, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/404.html').pipe(res);
    }

});

server.listen(3000, '127.0.0.1');
console.log('yo dawgs, now listening to port 3000');

___Node Package Manager___
In node.js command prompt >npm install express or >npm uninstall express

___The package.json File___
- package.json should hold all the dependencies that you need
- all you need is npm install to install all the dependencies at once

___Installing Nodemon___
- everytime you make a change to app.js, the server restarts automatically for you
- npm install -g nodemon "-g installs on computer"

___Introduction to Express___
Express
- easy and flexible routing system
- integrates with many templating engines
- contains a middleware framework
HTTP Methods
- GET, POST, DELETE, PUT
Responding to Requests
- GET - app.get('route', fn)
- POST - app.post('route', fn)
- DELETE - app.delete('route', fn)

var express = require('express');

var app = express();

app.get('/', function(req, res){
    res.send('this is the homepage');
});
app.get('/contact', function(req, res){
    res.send('this is the contact page');
});

app.listen(3000);

___Express Route Params___
- Creating dynamic routes based on the url link
var express = require('express');

var app = express();

app.get('/', function(req, res){
    res.send('this is the homepage');
});
app.get('/contact', function(req, res){
    res.send('this is the contact page');
});

app.get('/profile/:name', function(req, res){
    res.send('You requested to see a profile with the name of ' + req.params.name);
});

app.listen(3000);

___Template Engines___
./app.js
var express = require('express');

var app = express();

app.set('view engine', 'ejs');

app.get('/', function(req, res){
    res.sendFile(__dirname + '/index.html');
});
app.get('/contact', function(req, res){
    res.sendFile(__dirname + '/contact.html');
});

app.get('/profile/:name', function(req, res){
    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']}; //temp db
    res.render('profile', {person: req.params.name, data: data});
});

profile.ejs
<!DOCTYPE html>
<html>
    <head>
        <style>
            body{background: skyblue; font-family: verdana; color: #fff; padding: 30px;}
            h1{font-size: 48px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
            h2{font-size: 30px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}            
            p, li{font-size: 16px; text-align: center;}
            ul{list-style-type: none; padding: 0;}
        </style>
    </head>
    <body>
        <h1>Welcome to the profile of <%= person %></h1>
        <p>Ryu is a <%= data.age %> year old <%= data.job %></p>
        <h2>Hobbies</h2>
        <ul>
            <% data.hobbies.forEach(function(item){ %>
                <li><%= item %></li>
            <% }); %>
        </ul>
    </body>
</html>
app.listen(3000);

___Partial Templates___
var express = require('express');

var app = express();

app.set('view engine', 'ejs');

app.get('/', function(req, res){
    res.render('index');
});
app.get('/contact', function(req, res){
    res.render('contact');
});

app.get('/profile/:name', function(req, res){
    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']}; //temp db
    res.render('profile', {person: req.params.name, data: data});
});

app.listen(3000);

<nav>
    <ul>
        <li><a href="">Home</a></li>
        <li><a href="">Contact</a></li>
    </ul>
</nav>

<!DOCTYPE html>
<html>
    <head>
        <style>
            body{background: skyblue; font-family: verdana; color: #fff; padding: 30px;}
            h1{font-size: 48px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
            p{font-size: 16px; text-align: center;}
        </style>
    </head>
    <body>
        <% include partials/nav.ejs %>
        <h1>Welcome to the most awesome website on the net</h1>
        <p>You won't find a better website anywhere else!</p>
    </body>
</html>

___Middleware & Static Files___
Middleware
- Code that runs between request and response
- Serves static files like stylesheets and images

app.js
var express = require('express');

var app = express();

app.set('view engine', 'ejs');
app.use('/assets', express.static('assets')); //middleware

app.get('/', function(req, res){
    res.render('index');
});
app.get('/contact', function(req, res){
    res.render('contact');
});

app.get('/profile/:name', function(req, res){
    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']}; //temp db
    res.render('profile', {person: req.params.name, data: data});
});

app.listen(3000);

index.ejs
<!DOCTYPE html>
<html>
    <head>
        <link href="/assets/styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <% include partials/nav.ejs %>
        <h1>Welcome to the most awesome website on the net</h1>
        <p>You won't find a better website anywhere else!</p>
    </body>
</html>

___Query Strings___
- mysite.com/blog/news?page=2
- Page = 2
- mysite.com/contact?person=ryu%dept=marketing
- Parse the request, and pull out the data
- Taking data from the link

app.js
var express = require('express');

var app = express();

app.set('view engine', 'ejs');
app.use('/assets', express.static('assets')); //middleware

app.get('/', function(req, res){
    res.render('index');
});
app.get('/contact', function(req, res){
    res.render('contact', {qs: req.query});
});

app.get('/profile/:name', function(req, res){
    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']}; //temp db
    res.render('profile', {person: req.params.name, data: data});
});

app.listen(3000);

contact.ejs
<!DOCTYPE html>
<html>
    <head>
        <style>
            body{background: skyblue; font-family: verdana; color: #fff; padding: 30px;}
            h1{font-size: 48px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
            p{font-size: 16px; text-align: center;}
        </style>
    </head>
    <body>
        <% include partials/nav.ejs %>
        <h1>Contact Us</h1>
        <p>Contact the coolest cats on the web right here...</p>

        <form id="contact-form">
            <label for="who">Who do you want to contact</label>
            <input type="text" name="who" value="<%= qs.person %>">
            <label for="department">Which department?</label>
            <input type="text" name="department" value="<%= qs.dept %>">
            <label for="email">Your email</label>
            <input type="email" name="email">
            <input type="submit" name="submit">
        </form>
    </body>
</html>

Imagine we had a team page and a icon of 10 people, and when you click on the icon it will pre fill in the contact form based on who we clicked.

___POST Requests___
- POST is a request method
- POST requests, ask the server to accept/store data which is enclosed in the body of the request
- Often used when submitting forms
*GET requests are from query strings(?)
- In the previous module, yeah if we clicked an icon with their name that icon already came with the URL pre loaded, but in this case if we were to fill out a form ourselves and we wanted that data, that's why we use POST.

var express = require('express');
var bodyParser = require('body-parser');
var app = express();

var urlencodedParser = bodyParser.urlencoded({ extended: false })


app.set('view engine', 'ejs');
app.use('/assets', express.static('assets')); //middleware

app.get('/', function(req, res){
    res.render('index');
});

app.get('/contact', function(req, res){
    res.render('contact', {qs: req.query});
});

app.post('/contact', urlencodedParser, function(req, res){
    console.log(req.body)
    res.render('contact-success', {data: req.body});
});

app.get('/profile/:name', function(req, res){
    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']}; //temp db
    res.render('profile', {person: req.params.name, data: data});
});

app.listen(3000);

<!DOCTYPE html>
<html>
    <head>
        <style>
            body{background: skyblue; font-family: verdana; color: #fff; padding: 30px;}
            h1{font-size: 48px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
            p{font-size: 16px; text-align: center;}
        </style>
    </head>
    <body>
        <% include partials/nav.ejs %>
        <h1>Contact Us</h1>
        <p>Contact the coolest cats on the web right here...</p>

        <form id="contact-form" method="POST" action="/contact">
            <label for="who">Who do you want to contact</label>
            <input type="text" name="who" value="<%= qs.person %>">
            <label for="department">Which department?</label>
            <input type="text" name="department" value="<%= qs.dept %>">
            <label for="email">Your email</label>
            <input type="email" name="email">
            <input type="submit" name="submit">
        </form>
    </body>
</html>

___Intro to NoSQL/MongoDB___
NoSQL Databases
- Alternative to SQL databases
- Store documents (JSON) in a db, instead of tables with rows and columns
- Works really well with Javascript (and therefore Node.JS)