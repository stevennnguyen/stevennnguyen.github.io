___Introduction___
What is Angular 2?
- JS framework creating dynamic web apps
- Component based (not typical MVC)
- Written with TypeScript
- Quite different from Angular

Core Features of Angular 2
- Components
- Directives
- Templates

Create a simple directory app
- Routing
- Services
- Firebase

___Installing the Angular CLI___
- Angular commands:
  - Create new projects / generate core file setup
  - Spin up a local server
  - Create new components
- Requires Node Package Manager
In node command prompt
>npm install -g angular-cli
>ng new directory-name
Cd into the new directory
>ng serve

___Intro to TypeScript___
- Superset of Javascript (so very similar, with a few extras)
- Those extras being: Types, Classes, etc.
- In regular JS:
myVar = "a string"
myVar = 25
- In TypeScript:
myVar = "a string"
myVar = 25 X => NOT ALLOWED
- Declaring Types
myVar: string = "hello"
myVar: number = 20
myVar: boolean = true
myVar: any
myVar = 50
myVar: number[]
- Classes
class Car {
  wheels: number = 4
  drive {
    console.log('the car is driving')
  }
}
my Car: Car = new Car()
- Constructor Functions
class Car {
  speed: number;

  constructor(mph: number) {
    this.speed = mph;
  }
}
myCar: Car = new Car(70)

___Components___
app.component.ts
@Component portion points to all the the necessary references.

___Template & CSS___
styles.css
- Styles that affect the entire root component
- Individual component styles have priority however
  - app.component.css

___Creating a Component___
> ng generate component nameComponent
From @Component of new component, take the selector and place it in the root app.component.html file

___Ng-Content Directive___
- If you want to nest html or whatever into components <app-home>text goes here</app-home> for example, then use <ng-content></ng-content> directive in the respective component

___Data Binding___
- Data is transfered between home.component.ts (logic) and home.component.html (view)
Data Flow (Into The View)
- String interpolation
  - {{title}} (always resolves to a string)
- Property binding
  - <input [required]='expression'>
Data Flow (Out Of The View)
- Event Binding
  - <button (click)='expression/function'>
  - Component class can handle the event
Data Flow (Both Ways)
- Two-way data binding
  - <input [(ngModel)]="model/object">
  - Updates the model/object in the component class
  - In turn updates any reference to the model/object in the view/template
    - {{model}}

___Property Binding___
- Bind to HTML properties:
  - Native HTML properties: [value]="expression"
  - Built in angular directives: [ngClass]="expression"
  - Custom-made properties: [myProp]="expression"
- It appears string interpolation and property binding achieve the same thing however

___Event Binding___
- Bind events to HTML elements
  - Bind to native events (such as click events):
    - <button (click)="function">
  - Bind to custom events we make
    - <app-home (update)="function"></app-home>

___Two-Way Data Binding___
- Upon typing into an input box inside the browser, you're updating data on the page and changing the model in real time.

___Custom Property Binding (& @Input)___
- To pass objects/information from one component to another you can simply @Input() object; in the class. *Remember to add Input module in the import up top as well. I believe it is a top-down hierarchy in this case. Passing information down-top is done with Custom Events Binding with & @Output

___Custom Event Binding (& @Output)___
- We have 2 components root -> home and we're trying to pass an event from home -> root. Upon clicking a button on the home view, we fire off a function the passes holds an event. The function, defined in the logic, emits out the event. In root, one of our custom components is listening for an onYell event, which we created in home. Upon catching that event, it fires off its own root event, with informatino from home.

___Routing___
Routing
- /
- /home
- /directory
- /whatever
Out of the box, all render the same view because we don't have routing
- / -> home view
- /directory - directory view

Setting up Routes
*Shortcut for creating components
> ng g c name
app.module.ts
import { RouterModule, Routes } from '@angular/router';

const appRoutes: Routes = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];

@NgModule({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // <-- debugging purposes only
    )
    // other imports here
  ],
  ...
})
export class AppModule { }

app.component.html
<a routerLink="/home">Home</a>

<a routerLink="/directory">Directory</a>

*It seems that when data is being passed down there should be a "?" at the end of it.

___Adding Links___
- Done as per Angular documentation

___Route Params___
app.module.ts
- { path: 'directory/:ninja', component: DirectoryComponent }

directory.component.ts
- import {ActivatedRoute } from '@angular/router';
- this.ninja = route.snapshot.params['ninja'];
- <p>{{ninja}}</p>

___Directives Introduction___
Directives
- Directives are instructions which tell Angular to do something
- <router-outlet></router-outlet>
- [routerLink]=""
2 Types of Directives
Attribute:
- Interacts with the element it's on to change it peroperties
  - E.g ngClass
Structural:
  - Changes the structure of the HTML code
    - E.g *nglf

___ngFor___
- Directive to loop through items
- <li *ngFor="let ninja of ninjas">

___Pipes___
- Affect how our data is output to the screen
- | uppercase
- | slice: 1:3
- | uppercase | slice: 1:3

___Custom Filter Pipe___
> ng g pipe filter

directory.components.ts
- import { FilterPipe } from '../filter.pipe';

directory.component.html
- <input type="text" [(ngModel)]="term" [ngModelOptions]="{standalone: true}" />
- <li *ngFor="let ninja of ninjas | filter:term">

filter.pipe.ts
transform(ninjas: any, term: any): any {
    
    //check if search term is undefined

    if (term === undefined) return ninjas;

    //return updated ninjas array

    return ninjas.filter(function(ninja){

      return ninja.name.toLowerCase().includes(term.toLowerCase());

    });

  }

___Services___
Don't Repeat Yourself
Component 1
- Does something
- Connects to the database
Component 2
- Does something else
- Connects to the database
Services
Component 1
- Does something ->	Service
Component 2 ->		- Connects to database
- Does something
>ng g s logging

logging.service.ts
  log(){

    console.log('I am the logging service');

  }

app.module.ts

import { LoggingService } from './logging.service';
providers: [LoggingService]

home.component.ts
import { LoggingService } from '../logging.service'
constructor(private logger: LoggingService) { }
logIt(){

    this.logger.log();

  }

home.component.html
<button (click)="logIt()">Log me</button>

___HTTP Service___
app.module.ts
import { HttpModule } from '@angular/http';
imports: [
HttpModuile
]

data.service.ts
import { Http } from '@angular/http';

import { Observable } from 'rxjs/Rx';

import 'rxjs/add/operator/map';

constructor(private http: Http) { }

fetchData(){

  return this.http.get('https://nndb-b2950.firebaseio.com/.json').map(

    (res) => res.json()

  );

}

directory.component.ts
ngOnInit() {

  this.dataService.fetchData().subscribe(

    (data) => this.ninjas = data

  );

}

___Firebase API___
GET
index.html
 <script src="https://www.gstatic.com/firebasejs/4.1.3/firebase.js"></script>

 <script>

   // Initialize Firebase

   var config = {

     apiKey: "AIzaSyDUPV3K-N1HUgdu3yqf-39tBCzcqy2PfYU",

     authDomain: "nndb-b2950.firebaseapp.com",

     databaseURL: "https://nndb-b2950.firebaseio.com",

     projectId: "nndb-b2950",

     storageBucket: "nndb-b2950.appspot.com",

     messagingSenderId: "41172227457"

   };

   firebase.initializeApp(config);
</script>

directory.component.ts
declare var firebase: any;
ngOnInit() {
  this.fbGetData();

}
fbGetData(){

  firebase.database().ref('/').on('child_added', (snapshot) => {

    this.ninjas.push(snapshot.val());

  });
}

___Posting Data to Firebase___
directory.component.html
<form id="add-ninja">

  <input type="text" [(ngModel)]="name" name="name" />

  <input type="text" [(ngModel)]="belt" name="belt" />

  <button (click)="fbPostData(name, belt)">Add Ninja</button>

</form>

directory.component.ts
fbPostData(name, belt){

    firebase.database().ref('/').push({name: name, belt: belt});

}